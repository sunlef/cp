{
    "并查集": {
        "scope": "cpp",
        "prefix": "dsu",
        "body": [
            "struct dsu {",
            "    private:",
            "    int n;",
            "    std::vector<int> f, sz;",
            "",
            "    public:",
            "    dsu(int n) : n(n), f(n + 1), sz(n + 1, 1) {",
            "        std::iota(f.begin(), f.end(), 0);",
            "    }",
            "    int big_brother(int u) {",
            "        if (u > n) return -1;",
            "        while (u != f[u]) u = f[u] = f[f[u]];",
            "        return u;",
            "    }",
            "    bool same(int u, int v) {",
            "        int a = big_brother(u), b = big_brother(v);",
            "        if (a == b && a != -1)",
            "            return true;",
            "        else",
            "            return false;",
            "    }",
            "    bool merge(int u, int v) {",
            "        if (u > n || v > n) return false;",
            "        int a = big_brother(u), b = big_brother(v);",
            "        if (a == b) return false;",
            "        if (sz[a] > sz[b])",
            "            f[b] = a, sz[a] += sz[b];",
            "        else",
            "            f[a] = b, sz[b] += sz[a];",
            "        return true;",
            "    }",
            "    int size(int u) {",
            "        return sz[big_brother(u)];",
            "    }",
            "};"
        ],
        "description": "并查集"
    },
    "字典树": {
        "scope": "cpp",
        "prefix": "trie",
        "body": [
            "struct trie {",
            "    int max_idx;",
            "    int idx;",
            "    std::vector<std::vector<int>> son;",
            "    std::vector<int> is_end;",
            "    trie(int total_len, int char_set) : max_idx(total_len + 1), idx(0), son(max_idx, std::vector<int>(char_set, 0)), is_end(max_idx, 0) {}",
            "    trie(int n, int per_len, int char_set) : trie(n * per_len, char_set) {}",
            "    void insert(const string &str) {",
            "        int p = 0;",
            "        for (auto &ch : str) {",
            "            int b = ch - 'a';",
            "            if (son[p][b] == 0) son[p][b] = ++idx;",
            "            p = son[p][b];",
            "        }",
            "        is_end[p]++;",
            "    }",
            "    bool query(const string &str) {",
            "        int p = 0;",
            "        for (auto &ch : str) {",
            "            int b = ch - 'a';",
            "            if (son[p][b] == 0) return false;",
            "            p = son[p][b];",
            "        }",
            "        return is_end[p];",
            "    }",
            "};"
        ],
        "description": "字典树"
    },
    "树状数组": {
        "scope": "cpp",
        "prefix": "fenwick",
        "body": [
            "template <typename T> struct fenwick {",
            "    private:",
            "    int n;",
            "    std::vector<T> c;",
            "",
            "    public:",
            "    fenwick(int n) : n(n + 1), c(n + 1) {}",
            "    void add(int pos, T val) {",
            "        for (; pos < n; pos += pos & -pos) c[pos] += val;",
            "    }",
            "    T query(int pos) {",
            "        T res = 0;",
            "        for (; pos; pos -= pos & -pos) res += c[pos];",
            "        return res;",
            "    }",
            "};",
            ""
        ],
        "description": "树状数组"
    },
}