{
    "vector hash": {
        "scope": "cpp",
        "prefix": "vector_hash",
        "body": [
            "",
            "template <class _data_class = int, int _base = 13331> constexpr uint64_t vector_hash(const vector<_data_class> &vec) {",
            "    uint64_t res = 0;",
            "    for (const auto element : vec) {",
            "        res = _base * (uint64_t(element) + res + _base);",
            "    }",
            "    return res;",
            "}",
            ""
        ]
    },
    "string_hash": {
        "scope": "cpp",
        "prefix": "string_hash",
        "body": [
            "struct base_pow {",
            "    int N, base;",
            "    vector<uint64_t> val;",
            "",
            "    base_pow(int _N, int _base = 13331) : N(_N), base(_base), val(N + 1, 1) {",
            "        for (int i = 1; i <= N; ++i) {",
            "            val[i] = base * val[i - 1];",
            "        }",
            "    }",
            "};",
            "",
            "struct string_hash {",
            "    int N, base;",
            "    vector<uint64_t> pre;",
            "    vector<uint64_t>::const_iterator it_begin;",
            "",
            "    string_hash(const string &str, const base_pow &bp, int _base = 13331)",
            "        : N(int(str.size())), base(_base), pre(int(str.size()) + 1, 0), it_begin(bp.val.begin()) {",
            "        for (int i = 1; i <= N; ++i) {",
            "            pre[i] = base * pre[i - 1] + str[i - 1] + base;",
            "        }",
            "    }",
            "",
            "    uint64_t sub(int l, int r) {",
            "        assert(l >= 1 && r <= N);",
            "        return pre[r] - pre[l - 1] * *(it_begin + r - l + 1);",
            "    }",
            "};"
        ],
        "description": "string_hash"
    }
}
// Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
// Placeholders with the same ids are connected.
// Example:
// "Print to console": {
// 	"scope": "javascript,typescript",
// 	"prefix": "log",
// 	"body": [
// 		"console.log('$1');",
// 		"$2"
// 	],
// 	"description": "Log output to console"
// }